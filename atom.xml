<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Ruby Studio Blog]]></title>
  <link href="http://rubystudio.github.com/atom.xml" rel="self"/>
  <link href="http://rubystudio.github.com/"/>
  <updated>2012-07-01T00:53:54+03:00</updated>
  <id>http://rubystudio.github.com/</id>
  <author>
    <name><![CDATA[Svilen Vassilev]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[SASS and CoffeeScript support for Sublime Editor]]></title>
    <link href="http://rubystudio.github.com/blog/2012/07/01/sass-and-coffeescript-support-for-sublime-editor/"/>
    <updated>2012-07-01T20:02:00+03:00</updated>
    <id>http://rubystudio.github.com/blog/2012/07/01/sass-and-coffeescript-support-for-sublime-editor</id>
    <content type="html"><![CDATA[<p>My current programming editor of choice is <a href="http://www.sublimetext.com/">Sublime Editor 2</a>. Its code
highlighting and snippets component supports a host of languages by default, however SASS and CoffeeScript
are still not in the defaults, even after the <a href="http://www.sublimetext.com/blog/articles/sublime-text-2-0-released">recent update</a>.</p>

<p>Luckily Sublime supports TextMate bundles, so there&#8217;s an easy way to add the missing bits and pieces.
Here&#8217;s how to do it step by step:</p>

<h4>Get the <a href="https://github.com/n00ge/sublime-text-haml-sass">SASS</a> and <a href="https://github.com/jashkenas/coffee-script-tmbundle">CoffeeScript</a> bundles (both available on github):</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>git clone git://github.com/n00ge/sublime-text-haml-sass.git
</span><span class='line'>git clone git://github.com/jashkenas/coffee-script-tmbundle.git
</span></code></pre></td></tr></table></div></figure>


<h4>Open the Sublime Editor <code>Packages</code> folder</h4>

<p><img class="right" src="http://i.imgur.com/GGEU9m.jpg"></p>

<p>This is the folder containing all the syntax highlighting bundles. Its location differs, depending on
the OS you&#8217;re using, so best way to open it is via the editor&#8217;s <em>Preferences > Browse Packages&#8230;</em> menu entry:</p>

<h4>Copy the new bundles into the <code>Packages</code> folder</h4>

<p>For SASS you only need the <code>SASS</code> directory from the cloned repository. Disregard the <code>Sass</code> and <code>Ruby Haml</code>
folders. By the time of this writing Subilme already ships with built-in support for Ruby Haml.</p>

<p>For CS you need the entire cloned <code>coffee-script-tmbundle</code> repo as a folder, so copy it directly into <code>Packages</code>,
optionally renaming it into something shorter and cleaner, like &#8220;CoffeeScript&#8221;.</p>

<h4>Now restart Sublime Editor to activate your new bundles</h4>

<p>That&#8217;s it. Enjoy working with SASS and CoffeeScript!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Blog moved to Octopress]]></title>
    <link href="http://rubystudio.github.com/blog/2012/06/27/blog-moved-to-octopress/"/>
    <updated>2012-06-27T15:04:00+03:00</updated>
    <id>http://rubystudio.github.com/blog/2012/06/27/blog-moved-to-octopress</id>
    <content type="html"><![CDATA[<p><img class="right" src="http://i.imgur.com/WE86Qb.png"></p>

<p>We are very happy to anounce that we have moved to <a href="http://octopress.org/">Octopress</a> as our blogging platform.
It&#8217;s been a very smooth transition and we&#8217;re enjoying immensely the ability to write clean semantic posts
on top of a solid Ruby platform. As another Octopress user put it: &#8220;Ruby is not just about Rails&#8221; and in this
case we couldn&#8217;t agree more.</p>

<p>So what is Octopress? Self-labeled &#8220;A blogging framework for hackers&#8221;, it&#8217;s actually a very easy to deploy,
user-friendly platform, targeted at users who are comfortable with writing their posts by hand, using
semantic markup. Here&#8217;s a quote from their website:</p>

<blockquote><p>Octopress is a framework designed by Brandon Mathis for Jekyll, the blog aware<br/>static site generator powering Github Pages. To start blogging with Jekyll, you<br/>have to write your own HTML templates, CSS, Javascripts and set up your<br/>configuration. But with Octopress All of that is already taken care of.<br/>Simply clone or fork Octopress, install dependencies and the theme, and you’re set.</p><footer><strong>Brandon Mathis</strong> <cite><a href='http://octopress.org/'>Octopress.org</a></cite></footer></blockquote>


<p>It looks like both <a href="http://github.com/mojombo/jekyll">Jekyll</a> and <a href="http://octopress.org/">Octopress</a> have
been gaining momentum for the past year with a lot of users going back to the roots of the clean,
semantic, standarts compliant Web, and it&#8217;s a trend that we here at Ruby Studio deeply appreciate and support.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[New version of our website]]></title>
    <link href="http://rubystudio.github.com/blog/2012/06/26/new-version-of-our-website/"/>
    <updated>2012-06-26T16:41:00+03:00</updated>
    <id>http://rubystudio.github.com/blog/2012/06/26/new-version-of-our-website</id>
    <content type="html"><![CDATA[<p>We have released the new iteration of our website <a href="http://rubystudio.net/">rubystudio.net</a>. It&#8217;s a
complete rewrite, featuring a cleaner, more simplified look, taking full advantage of
<a href="http://twitter.github.com/bootstrap/">Twitter Bootstrap</a> and other JQuery goodies.
Under the hood there are a lot of changes too, most importantly all requests to all rubystudio subdomains
are now handled by a single monolithic app, utilizing the Rails 3.1+ <a href="http://railscasts.com/episodes/123-subdomains-revised">subdomain APIs</a>.
We have also switched our background workers from <code>delayed_job</code> to using <code>redis server</code> and <a href="https://github.com/defunkt/resque/">resque</a>.</p>

<p>Here are a few screenshot from this version:</p>

<iframe class="imgur-album" width="100%" height="550" frameborder="0" src="http://imgur.com/a/jJCRK/embed"></iframe>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Zsh and the new_post generator in Octopress]]></title>
    <link href="http://rubystudio.github.com/blog/2012/06/26/zsh-and-the-new-post-generator-in-octopress/"/>
    <updated>2012-06-26T14:53:00+03:00</updated>
    <id>http://rubystudio.github.com/blog/2012/06/26/zsh-and-the-new-post-generator-in-octopress</id>
    <content type="html"><![CDATA[<p><a href="http://travisjeffery.com/">Travis Jeffery</a> has posted a nice explanation on how to avoid
zsh errors when using the <code>new_post</code> generator with <a href="http://octopress.org">Octopress</a>.</p>

<p><img src="http://i.imgur.com/zCwzE.png"></p>

<blockquote><p>So here’s the problem, &#8230; throwing junk into your Zsh configuration before understanding what it all meant! &#8230;</p><footer><strong>Travis Jeffery</strong> <cite><a href='http://travisjeffery.com/b/2012/01/zshs-extended-glob-and-octopresss-new-post-script/'>Zsh&#8217;s Extended Glob, and Octopress&#8217;s New_post Script</a></cite></footer></blockquote>


<p><a href="http://travisjeffery.com/b/2012/01/zshs-extended-glob-and-octopresss-new-post-script/">Read the entire post here</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Cloning remote branches with Git]]></title>
    <link href="http://rubystudio.github.com/blog/2012/06/26/cloning-remote-branches-with-git/"/>
    <updated>2012-06-26T14:08:00+03:00</updated>
    <id>http://rubystudio.github.com/blog/2012/06/26/cloning-remote-branches-with-git</id>
    <content type="html"><![CDATA[<p>After cloning locally a remote git project with multiple branches, you will only get the default
project branch, typically <code>master</code>. At this point executing <code>git branch</code> will show you the locally available
branches in your repository:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>git branch
</span><span class='line'>* master
</span></code></pre></td></tr></table></div></figure>


<p>However if you add the <code>-a</code> option to <code>git branch</code> you&#8217;ll get a list, which also includes all the available
remote brances, like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>git branch -a
</span><span class='line'>* master
</span><span class='line'>  origin/HEAD
</span><span class='line'>  origin/master
</span><span class='line'>  origin/source
</span><span class='line'>  origin/foobar
</span></code></pre></td></tr></table></div></figure>


<p>Using this list as a reference, we can now create a local tracking branch to work on, for example:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>git checkout -b <span class="nb">source </span>origin/source
</span></code></pre></td></tr></table></div></figure>


<p>The <code>source</code> branch will now be checked out and available locally, which we can see by running
<code>git branch</code> once again:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>git branch
</span><span class='line'>  master
</span><span class='line'>* <span class="nb">source</span>
</span></code></pre></td></tr></table></div></figure>


<p>That&#8217;s it! There&#8217;s also the <code>git pull --all</code> command which will fetch all the remote branches
that have been tracked locally, however it <strong>will not</strong> create local tracking branches.
There is no git native way of automatically creating local tacking branches of all remotes and
this is perhaps not a good idea anyway, as they can get stale rather quick.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[In development: Lombard, a pawnshop app]]></title>
    <link href="http://rubystudio.github.com/blog/2012/03/20/in-development-lombard/"/>
    <updated>2012-03-20T14:34:00+02:00</updated>
    <id>http://rubystudio.github.com/blog/2012/03/20/in-development-lombard</id>
    <content type="html"><![CDATA[<p>We have started the development of Lombard, a web based software, designed to fulfill all the needs
of a pawnshop: management and tracking of customers, deals, contracts, products, loans, payments,
renewals and sales. Fully compliant with Bulgarian trade law, it provides easy ways of generating
all the relevant documents, bills, tickets and registries required for day-to-day administration
and accountancy.
We expect this to be our primary development focus in the upcoming months with a release anticipated
somewhere midsummer.
Here&#8217;s a sneak peak of the UI:</p>

<p><img class="center" src="http://i.imgur.com/KKZ4il.png"></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Project revamp: tis-bg.com]]></title>
    <link href="http://rubystudio.github.com/blog/2012/03/09/project-revamp-tis-bg-dot-com/"/>
    <updated>2012-03-09T14:21:00+02:00</updated>
    <id>http://rubystudio.github.com/blog/2012/03/09/project-revamp-tis-bg-dot-com</id>
    <content type="html"><![CDATA[<p>Another project revamp announcement, this time it&#8217;s <a href="http://www.tis-bg.com/">tis-bg.com</a>. Formerly a PHP
application, it has now been rewritten in Rails 3.2, featuring a custom-built CMS and i18n features.
Working within the limits of our customer design requirements, we have kept the app simple and lightweight.
Like all our apps, it&#8217;s fully HTML5 &amp; CSS3 compliant and very fast.</p>

<p><img class="center" src="http://i.imgur.com/mI53al.png"></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[New project: wor84.vaccbih.info]]></title>
    <link href="http://rubystudio.github.com/blog/2012/02/22/new-project-wor84-dot-vaccbih-dot-info/"/>
    <updated>2012-02-22T14:30:00+02:00</updated>
    <id>http://rubystudio.github.com/blog/2012/02/22/new-project-wor84-dot-vaccbih-dot-info</id>
    <content type="html"><![CDATA[<p>We have recently completed and released another project: <a href="http://wor84.vaccbih.info/">wor84.vaccbih.info</a> It’s been a pleasure working with our <strong>VATSIM</strong> friends from <strong>vACCBiH</strong> and we’re looking forward to pushing other projects with them in the future!</p>

<p><img class="center" src="http://i.imgur.com/ZXqcIl.png"></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Project revamp: religiology.org]]></title>
    <link href="http://rubystudio.github.com/blog/2012/02/09/project-revamp-religiology-dot-org/"/>
    <updated>2012-02-09T14:06:00+02:00</updated>
    <id>http://rubystudio.github.com/blog/2012/02/09/project-revamp-religiology-dot-org</id>
    <content type="html"><![CDATA[<p>We have released the new version of <a href="http://religiology.org/">religiology.org</a>. While the visual look and feel
have been mostly preserved, it&#8217;s rewritten from scratch as rails 3.2 application featuring a custom-built CMS
and powerful administration panel and toolset under the hood. The user experience has been greatly enhanced
wuth the website now being approximately 3 times faster, despite its heavy content.</p>

<p><img class="center" src="http://i.imgur.com/sSD01l.png"></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Gitlab adopted as internal development platform]]></title>
    <link href="http://rubystudio.github.com/blog/2012/01/31/gitlab-adopted-as-internal-development-platform/"/>
    <updated>2012-01-31T14:28:00+02:00</updated>
    <id>http://rubystudio.github.com/blog/2012/01/31/gitlab-adopted-as-internal-development-platform</id>
    <content type="html"><![CDATA[<p><img class="right" src="http://i.imgur.com/BnbO0b.png"></p>

<p>We’re very excited to announce that we have adopted <a href="http://gitlabhq.com/">Gitlab</a> as our internal development, collaboration and repository platform! All our current and future projects have been migrated from github to our dedicated gitlab server and we’ve been extremely pleased with the stability and maturity of the software.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Projects upgrade: rails 3.2]]></title>
    <link href="http://rubystudio.github.com/blog/2012/01/27/projects-upgrade-rails-3-dot-2/"/>
    <updated>2012-01-27T14:58:00+02:00</updated>
    <id>http://rubystudio.github.com/blog/2012/01/27/projects-upgrade-rails-3-dot-2</id>
    <content type="html"><![CDATA[<p><img class="right" src="http://i.imgur.com/6nnJWb.png"></p>

<p>We’ve upgraded our current projects to the <a href="http://guides.rubyonrails.org/3_2_release_notes.html">newly released rails 3.2</a>. The upgrade currently affects rubystudio.net, darvazaogrev.com, vasev.org. Rails 3.2 will be used for all future projects and revamps that are currently in development, and we’re also looking at moving <a href="http://iptrac.rubystudio.net/">IP.Trac</a> to the 3.x branch.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Project revamp: vasev.org]]></title>
    <link href="http://rubystudio.github.com/blog/2011/11/08/project-revamp-vasev-dot-org/"/>
    <updated>2011-11-08T15:01:00+02:00</updated>
    <id>http://rubystudio.github.com/blog/2011/11/08/project-revamp-vasev-dot-org</id>
    <content type="html"><![CDATA[<p><img class="right" src="http://i.imgur.com/KKQuZb.png"></p>

<p><a href="http://vasev.org/">Vasev.org</a> has been rewritten as Rails 3.1.1 application, bringing speed and security improvements, usability enhancement and design tweaks.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[New web project: darvazaogrev.com]]></title>
    <link href="http://rubystudio.github.com/blog/2011/10/12/new-web-project-darvazaogrev-dot-com/"/>
    <updated>2011-10-12T15:05:00+03:00</updated>
    <id>http://rubystudio.github.com/blog/2011/10/12/new-web-project-darvazaogrev-dot-com</id>
    <content type="html"><![CDATA[<p><img class="right" src="http://i.imgur.com/p52Kwb.png"></p>

<p>We’re happy to announce the launch of the new version of <a href="http://darvazaogrev.com/">darvazaogrev.com</a> website. It’s been completely rewritten as a rails 3.1.1 application with new minimalist html5 &amp; css3 design.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Auto-resizing page elements with jquery mobile]]></title>
    <link href="http://rubystudio.github.com/blog/2011/09/26/auto-resizing-page-elements-with-jquery-mobile/"/>
    <updated>2011-09-26T18:44:00+03:00</updated>
    <id>http://rubystudio.github.com/blog/2011/09/26/auto-resizing-page-elements-with-jquery-mobile</id>
    <content type="html"><![CDATA[<p><img class="right" src="http://i.imgur.com/CMKxnb.png?1"></p>

<p>If you’ve been using jQuery Mobile from the start or if you’re just beginning to play with it
(beta 3 is current at the time of this writing) you might have noticed that in recent versions
auto-resizing of page elements does not work for all devices out of the box and this was not the
case in earlier versions. The answer is simple, but not well documented (if at all):
you need to add the viewport meta tag in your layout:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;meta name="viewport" content="width=device-width, initial-scale=1"&gt;</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Dealing with the “invalid multibyte char” error]]></title>
    <link href="http://rubystudio.github.com/blog/2011/09/15/dealing-with-the-invalid-multibyte-char-error/"/>
    <updated>2011-09-15T18:51:00+03:00</updated>
    <id>http://rubystudio.github.com/blog/2011/09/15/dealing-with-the-invalid-multibyte-char-error</id>
    <content type="html"><![CDATA[<p>If you happen to use non-ASCII characters in a ruby file within your rails app, say a controller,
library, database seeds, etc, you might have the invalid multibyte char (US-ASCII) error thrown
at you by ruby 1.9.x. This is something you’re bound to experience if you’re developing an app
that is localized in a language that utilizes non-ASCII characters and you’re not using the i18n
libraries of rails to define your strings. The solution is very easy and feels almost magical:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># encoding: utf-8</span></code></pre></td></tr></table></div></figure>


<p>Put this line of code on top of all scripts that raise the error. Unfortunately there seems to be
no way to deal with it on application level with a single entry. It&#8217;s Ruby legacy, but perhaps it
should be considered as a Rails default for future versions.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Piwik - the in-house web analytics solution]]></title>
    <link href="http://rubystudio.github.com/blog/2011/09/13/piwik-the-in-house-web-analytics-solution/"/>
    <updated>2011-09-13T18:57:00+03:00</updated>
    <id>http://rubystudio.github.com/blog/2011/09/13/piwik-the-in-house-web-analytics-solution</id>
    <content type="html"><![CDATA[<p><img class="right" src="http://i.imgur.com/WJ3WNb.png?1"></p>

<p>All piblic websites need a way to track their visitors and while Google Analytics remains
the de-facto standart for web analytics, in certain cases customers prefer alternatives.
There might be several reasons to opt for an alternative, to name but a few:</p>

<ul>
<li>the customer might not trust Google or generally any external service with their web data</li>
<li>the customer might want features that are missing from Google analytcis, such as real-time analytics</li>
<li>the customer might want a more sophisticated API without quota limits to pull their data</li>
</ul>


<p>Granted we still use and recommend Google analytics as the primary solution here at Ruby Studio,
we looked for possible alternatives in an effort to accomodate these user cases.</p>

<p>For live tracking the popular choice is <a href="http://www.woopra.com/">Woopra</a>, and we still use it on some of our
projects on customer request, however it has the downside of loading too much javascript too slowly and recent
tests we’ve made indicate that Woopra code takes about as much to load and process as all the rest
of our code and assets for a particular page put together. Some tweaks and hacks are possible for
performance improvement, but overall it remains too slow and hence not a primary choice for us.</p>

<p>Ideally we would have picked a Ruby based solution, so we considered <a href="http://www.railstat.com/">RailStat</a>,
but we decided it’s not yet mature enough for production, its feature set is still somewhat limited and
there seems to be no active development. We’ll be keeping an eye on it for the future.</p>

<p>So eventually our choice fell on <a href="http://piwik.org/">Piwik</a>. An open source project with rich feature set,
slick ajax-y interface, actively developed and maintained, with good market penetration (used on more than
150 000 sites). It also has a simplified, but fully working Live analytics module, allows extensive
customization and provides a rich API. Performance seems also quite good, the speed of getting and parsing
the tracking javascript seems on par with Google analytics, the impact on the webapp performance is minimal.</p>

<p>So we will be offering Piwik as an option for web analytics to our customers in 3 varieties:</p>

<ul>
<li>as part of our unified analytics service at <a href="http://analytics.rubystudio.net">analytics.rubystudio.net</a>.
This service will be used by multiple customers and web projects; user accounts for access and website
permissions will be set at per customer basis.</li>
<li>as a separate Piwik instance, hosted by us, but not shared with other customers or web sites,
and the customer will receive full administration rights for the instance.</li>
<li>as a customer-hosted solution. We can install and configure a Piwik instance for our customers
on their own servers or at their chosen hosting provider, and in this case the customer retains
all the privileges and responsibility of maintaining and hosting the software on their own</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Sitemaps: the rails 3.1 way]]></title>
    <link href="http://rubystudio.github.com/blog/2011/09/10/sitemaps-the-rails-3-dot-1-way/"/>
    <updated>2011-09-10T19:07:00+03:00</updated>
    <id>http://rubystudio.github.com/blog/2011/09/10/sitemaps-the-rails-3-dot-1-way</id>
    <content type="html"><![CDATA[<p>Having a sitemap for your website is a nice convention, it helps search engines find, index and build
an hierarchy of your pages and it also gives you some control of what content is parsed and how often.
At Ruby Studio we regard sitemaps as a mandatory aspect of development and SEO and always include them
in the apps we build, even if it’s a simple app with no much dynamic content, such as our
<a href="http://rubystudio.net/">current homepage</a>.</p>

<p>So what is our preferred method of incorporating sitemaps in rails applications? There is a really
easy way, by using a gem that is actively maintained and fully compatible with rails 3.1. As an extra
benefit, the gem is really well documented. It’s called <a href="http://rubygems.org/gems/sitemap_generator">sitemap_generator</a>.</p>

<p>Here’s how to get going with it in a few easy steps:</p>

<ul>
<li>Add <code>gem 'sitemap_generator'</code> to your Gemfile and run <code>bundle</code>. This will install the gem</li>
<li>Run <code>rake sitemap:install</code> to setup the gem. This will generate a <code>config/sitemap.rb</code> file which is your
sitemap configuration descriptor file. You can run this task on your development machine and there will be
no need to repeat the process for production.</li>
<li>Open your <code>sitemap.rb</code> file to define the pages you need included in your sitemap. Only the root home page
is included by default. In your <code>sitemap.rb</code> file you&#8217;ll find initially a block of code:</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">SitemapGenerator</span><span class="o">::</span><span class="no">Sitemap</span><span class="o">.</span><span class="n">default_host</span> <span class="o">=</span> <span class="s2">&quot;http://www.example.com&quot;</span>
</span><span class='line'><span class="no">SitemapGenerator</span><span class="o">::</span><span class="no">Sitemap</span><span class="o">.</span><span class="n">create</span> <span class="k">do</span>
</span><span class='line'><span class="o">.</span><span class="n">.</span><span class="o">.</span><span class="n">.</span><span class="o">.</span><span class="n">.</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Edit the file, inserting into the block the links to your pages or resources like this:</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">SitemapGenerator</span><span class="o">::</span><span class="no">Sitemap</span><span class="o">.</span><span class="n">default_host</span> <span class="o">=</span> <span class="s2">&quot;http://www.example.com&quot;</span>
</span><span class='line'><span class="no">SitemapGenerator</span><span class="o">::</span><span class="no">Sitemap</span><span class="o">.</span><span class="n">create</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">add</span> <span class="s1">&#39;/contact_us&#39;</span>
</span><span class='line'>  <span class="no">Content</span><span class="o">.</span><span class="n">find_each</span> <span class="k">do</span> <span class="o">|</span><span class="n">content</span><span class="o">|</span>
</span><span class='line'>    <span class="n">add</span> <span class="n">content_path</span><span class="p">(</span><span class="n">content</span><span class="p">),</span> <span class="ss">:lastmod</span> <span class="o">=&gt;</span> <span class="n">content</span><span class="o">.</span><span class="n">updated_at</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>As you can see from the example, static pages are added by a simple add declaration, and dynamic content can
be easily added by a nested block selector, polling your rails models and extracting blogs, articles or any
other dynamic assets you might have in your app. Neat and easy!</p>

<p>There are a number of supporter options you can add to your configuration to fine tune the crawling
frequency, priority, etc, such as:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">add</span> <span class="s1">&#39;/contact_us&#39;</span><span class="p">,</span> <span class="ss">:changefreq</span> <span class="o">=&gt;</span> <span class="s1">&#39;monthly&#39;</span>
</span><span class='line'><span class="n">add</span> <span class="s1">&#39;/about&#39;</span><span class="p">,</span> <span class="ss">:priority</span> <span class="o">=&gt;</span> <span class="mi">0</span><span class="o">.</span><span class="mi">75</span>
</span></code></pre></td></tr></table></div></figure>


<p>The full list is available in the <a href="http://rdoc.info/github/kjvarga/sitemap_generator/master/frames">gem documentation</a>.</p>

<ul>
<li>After writing the configuration, you’re ready to actually generate your sitemaps. Run <code>rake sitemap:refresh</code>.
This will create the sitemaps and put them in your public/ folder, appropriately compressing them with gzip
and naming them by default: <code>sitemap_index.xml.gz, sitemap1.xml.gz</code>, etc</li>
<li>Next you should add the path to your sitemap in your <code>robots.txt</code> file, so that the spiders can find it
automatically: <code>Sitemap: http://www.example.com/sitemap_index.xml.gz</code></li>
<li>Upon a sitemap generation, the script automatically notifies (pings) major search engines (Google, Yahoo,
Bing, Ask, SitemapWriter) that a new sitemap is available. In development you can disable the notification
by using instead <code>rake sitemap:refresh:no_ping</code></li>
<li>That’s all, you’re now ready to rumble with your new shiny sitemaps. In production you can add a crontab
entry (either manually, or using the <a href="http://rubygems.org/gems/whenever">whenever</a> gem) for the rake task
to automatically re-generate your sitemaps on, say, a daily basis. Here’s an example of raw crontab entry:</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>0 5 * * * /bin/bash -l -c <span class="s1">&#39;cd /path/to/webapp &amp;&amp; RAILS_ENV=production rake -s sitemap:refresh --silent&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Or an example whenever entry:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># config/schedule.rb</span>
</span><span class='line'><span class="n">every</span> <span class="mi">1</span><span class="o">.</span><span class="n">day</span><span class="p">,</span> <span class="ss">:at</span> <span class="o">=&gt;</span> <span class="s1">&#39;5:00 am&#39;</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">rake</span> <span class="s2">&quot;-s sitemap:refresh&quot;</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>The whole setup and deployment process takes some 15 minutes and is really flexible and configurable.
No more reasons to skip on this important part of search engine optimization and web development
best practices.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Development focus: rubystudio.net]]></title>
    <link href="http://rubystudio.github.com/blog/2011/09/09/development-focus-rubystudio-dot-net/"/>
    <updated>2011-09-09T14:18:00+03:00</updated>
    <id>http://rubystudio.github.com/blog/2011/09/09/development-focus-rubystudio-dot-net</id>
    <content type="html"><![CDATA[<p>We’ve launched the initial version of <a href="http://rubystudio.net/">our website</a> today. It has pretty basic functionality right now, and we regard it as merely the surface layer of a system that will eventually let us manage and administer our customers and their projects with ease and convenience. So much of what is planned is actually irrelevant to the general audience and will remain invisible in the public section of the site. Some important public sections though are still incomplete and we will focus on bringing them up in the following days. These are the portfolio and testimonials listings, the FAQ section and the IP.Trac pages which are perhaps the most important for us right now, since IP.Trac is currently our flagman product and it still lacks consistent documentation and user-friendly manual, even though it’s been used in production by ISPs for more than a year now, The fact of the matter is we needed web presence and we needed it quickly, to match the speed with which RubyStudio transitioned from a loosely linked group of individuals working occasionally together on random projects to a real company with its own face and branding.</p>

<p>Two things make us particularly happy about the current early version of the website. First is speed: it feels really fast; in a day or two we’ll have accumulated statistics for the average load times for our pages, but I expect them to be around half a second. Hats off to the asset pipeline and the rendering improvements in Rails 3.1! And second is the fact that it validates as HTML5 with no errors, which of course has to be expected, considering all the bragging about standards compliance we’ve put in our promo pages :)</p>
]]></content>
  </entry>
  
</feed>
