<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: tips | Ruby Studio Blog]]></title>
  <link href="http://blog.rubystudio.net/blog/categories/tips/atom.xml" rel="self"/>
  <link href="http://blog.rubystudio.net/"/>
  <updated>2012-07-10T19:26:56+03:00</updated>
  <id>http://blog.rubystudio.net/</id>
  <author>
    <name><![CDATA[Svilen Vassilev]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Compacting ruby code]]></title>
    <link href="http://blog.rubystudio.net/blog/2012/07/04/compacting-ruby-code/"/>
    <updated>2012-07-04T14:44:00+03:00</updated>
    <id>http://blog.rubystudio.net/blog/2012/07/04/compacting-ruby-code</id>
    <content type="html"><![CDATA[<p><a href="http://www.drurly.com/">Dru Riley</a> has posted a nice example on refactoring a reddit-like ruby application
into just 10 lines of very dense code.</p>

<p><blockquote><p>We are using an application ... to explore seldom used features of Ruby. This tutorial will highlight concepts such as ternary operators, multiple assignment, and multiple argument passing.</p><footer><strong>Dru Riley</strong> <cite><a href='http://www.drurly.com/blog/2012/06/26/reddit-in-10-lines-of-code/'>Tutorial: Reddit in 10 Lines of Code</a></cite></footer></blockquote></p>

<p><a href="http://www.drurly.com/blog/2012/06/26/reddit-in-10-lines-of-code/">Read the entire post here</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SASS and CoffeeScript support for Sublime Editor]]></title>
    <link href="http://blog.rubystudio.net/blog/2012/07/01/sass-and-coffeescript-support-for-sublime-editor/"/>
    <updated>2012-07-01T20:02:00+03:00</updated>
    <id>http://blog.rubystudio.net/blog/2012/07/01/sass-and-coffeescript-support-for-sublime-editor</id>
    <content type="html"><![CDATA[<p>My current programming editor of choice is <a href="http://www.sublimetext.com/">Sublime Editor 2</a>. Its code
highlighting and snippets component supports a host of languages by default, however SASS and CoffeeScript
are still not in the defaults, even after the <a href="http://www.sublimetext.com/blog/articles/sublime-text-2-0-released">recent update</a>.</p>

<p>Luckily Sublime supports TextMate bundles, so there's an easy way to add the missing bits and pieces.
Here's how to do it step by step:</p>

<h4>Get the <a href="https://github.com/n00ge/sublime-text-haml-sass">SASS</a> and <a href="https://github.com/jashkenas/coffee-script-tmbundle">CoffeeScript</a> bundles (both available on github):</h4>

<p><code>sh
git clone git://github.com/n00ge/sublime-text-haml-sass.git
git clone git://github.com/jashkenas/coffee-script-tmbundle.git
</code></p>

<h4>Open the Sublime Editor <code>Packages</code> folder</h4>

<p><img class="right" src="http://i.imgur.com/GGEU9m.jpg"></p>

<p>This is the folder containing all the syntax highlighting bundles. Its location differs, depending on
the OS you're using, so best way to open it is via the editor's <em>Preferences > Browse Packages...</em> menu entry:</p>

<h4>Copy the new bundles into the <code>Packages</code> folder</h4>

<p>For SASS you only need the <code>SASS</code> directory from the cloned repository. Disregard the <code>Sass</code> and <code>Ruby Haml</code>
folders. By the time of this writing Subilme already ships with built-in support for Ruby Haml.</p>

<p>For CS you need the entire cloned <code>coffee-script-tmbundle</code> repo as a folder, so copy it directly into <code>Packages</code>,
optionally renaming it into something shorter and cleaner, like "CoffeeScript".</p>

<h4>Now restart Sublime Editor to activate your new bundles</h4>

<p>That's it. Enjoy working with SASS and CoffeeScript!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Zsh and the new_post generator in Octopress]]></title>
    <link href="http://blog.rubystudio.net/blog/2012/06/26/zsh-and-the-new-post-generator-in-octopress/"/>
    <updated>2012-06-26T14:53:00+03:00</updated>
    <id>http://blog.rubystudio.net/blog/2012/06/26/zsh-and-the-new-post-generator-in-octopress</id>
    <content type="html"><![CDATA[<p><a href="http://travisjeffery.com/">Travis Jeffery</a> has posted a nice explanation on how to avoid
zsh errors when using the <code>new_post</code> generator with <a href="http://octopress.org">Octopress</a>.</p>

<p><img src="http://i.imgur.com/zCwzE.png"></p>

<p><blockquote><p>So here’s the problem, ... throwing junk into your Zsh configuration before understanding what it all meant! ...</p><footer><strong>Travis Jeffery</strong> <cite><a href='http://travisjeffery.com/b/2012/01/zshs-extended-glob-and-octopresss-new-post-script/'>Zsh's Extended Glob, and Octopress's New_post Script</a></cite></footer></blockquote></p>

<p><a href="http://travisjeffery.com/b/2012/01/zshs-extended-glob-and-octopresss-new-post-script/">Read the entire post here</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Cloning remote branches with Git]]></title>
    <link href="http://blog.rubystudio.net/blog/2012/06/26/cloning-remote-branches-with-git/"/>
    <updated>2012-06-26T14:08:00+03:00</updated>
    <id>http://blog.rubystudio.net/blog/2012/06/26/cloning-remote-branches-with-git</id>
    <content type="html"><![CDATA[<p>After cloning locally a remote git project with multiple branches, you will only get the default
project branch, typically <code>master</code>. At this point executing <code>git branch</code> will show you the locally available
branches in your repository:</p>

<p><code>sh
$ git branch
* master
</code></p>

<p>However if you add the <code>-a</code> option to <code>git branch</code> you'll get a list, which also includes all the available
remote brances, like this:</p>

<p><code>sh
$ git branch -a
* master
  origin/HEAD
  origin/master
  origin/source
  origin/foobar
</code></p>

<p>Using this list as a reference, we can now create a local tracking branch to work on, for example:</p>

<p><code>sh
git checkout -b source origin/source
</code></p>

<p>The <code>source</code> branch will now be checked out and available locally, which we can see by running
<code>git branch</code> once again:</p>

<p><code>sh
$ git branch
  master
* source
</code></p>

<p>That's it! There's also the <code>git pull --all</code> command which will fetch all the remote branches
that have been tracked locally, however it <strong>will not</strong> create local tracking branches.
There is no git native way of automatically creating local tacking branches of all remotes and
this is perhaps not a good idea anyway, as they can get stale rather quick.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Auto-resizing page elements with jquery mobile]]></title>
    <link href="http://blog.rubystudio.net/blog/2011/09/26/auto-resizing-page-elements-with-jquery-mobile/"/>
    <updated>2011-09-26T18:44:00+03:00</updated>
    <id>http://blog.rubystudio.net/blog/2011/09/26/auto-resizing-page-elements-with-jquery-mobile</id>
    <content type="html"><![CDATA[<p><img class="right" src="http://i.imgur.com/CMKxnb.png?1"></p>

<p>If you’ve been using jQuery Mobile from the start or if you’re just beginning to play with it
(beta 3 is current at the time of this writing) you might have noticed that in recent versions
auto-resizing of page elements does not work for all devices out of the box and this was not the
case in earlier versions. The answer is simple, but not well documented (if at all):
you need to add the viewport meta tag in your layout:</p>

<p><code>
&lt;meta name="viewport" content="width=device-width, initial-scale=1"&gt;
</code></p>
]]></content>
  </entry>
  
</feed>
