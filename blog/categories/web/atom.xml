<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: web | Ruby Studio Blog]]></title>
  <link href="http://rubystudio.github.com/blog/categories/web/atom.xml" rel="self"/>
  <link href="http://rubystudio.github.com/"/>
  <updated>2012-06-27T15:53:35+03:00</updated>
  <id>http://rubystudio.github.com/</id>
  <author>
    <name><![CDATA[Svilen Vassilev]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Piwik - the in-house web analytics solution]]></title>
    <link href="http://rubystudio.github.com/blog/2011/09/13/piwik-the-in-house-web-analytics-solution/"/>
    <updated>2011-09-13T18:57:00+03:00</updated>
    <id>http://rubystudio.github.com/blog/2011/09/13/piwik-the-in-house-web-analytics-solution</id>
    <content type="html"><![CDATA[<p><img class="right" src="http://i.imgur.com/WJ3WNb.png?1"></p>

<p>All piblic websites need a way to track their visitors and while Google Analytics remains
the de-facto standart for web analytics, in certain cases customers prefer alternatives.
There might be several reasons to opt for an alternative, to name but a few:</p>

<ul>
<li>the customer might not trust Google or generally any external service with their web data</li>
<li>the customer might want features that are missing from Google analytcis, such as real-time analytics</li>
<li>the customer might want a more sophisticated API without quota limits to pull their data</li>
</ul>


<p>Granted we still use and recommend Google analytics as the primary solution here at Ruby Studio,
we looked for possible alternatives in an effort to accomodate these user cases.</p>

<p>For live tracking the popular choice is <a href="http://www.woopra.com/">Woopra</a>, and we still use it on some of our
projects on customer request, however it has the downside of loading too much javascript too slowly and recent
tests we’ve made indicate that Woopra code takes about as much to load and process as all the rest
of our code and assets for a particular page put together. Some tweaks and hacks are possible for
performance improvement, but overall it remains too slow and hence not a primary choice for us.</p>

<p>Ideally we would have picked a Ruby based solution, so we considered <a href="http://www.railstat.com/">RailStat</a>,
but we decided it’s not yet mature enough for production, its feature set is still somewhat limited and
there seems to be no active development. We’ll be keeping an eye on it for the future.</p>

<p>So eventually our choice fell on <a href="http://piwik.org/">Piwik</a>. An open source project with rich feature set,
slick ajax-y interface, actively developed and maintained, with good market penetration (used on more than
150 000 sites). It also has a simplified, but fully working Live analytics module, allows extensive
customization and provides a rich API. Performance seems also quite good, the speed of getting and parsing
the tracking javascript seems on par with Google analytics, the impact on the webapp performance is minimal.</p>

<p>So we will be offering Piwik as an option for web analytics to our customers in 3 varieties:</p>

<ul>
<li>as part of our unified analytics service at <a href="http://analytics.rubystudio.net">analytics.rubystudio.net</a>.
This service will be used by multiple customers and web projects; user accounts for access and website
permissions will be set at per customer basis.</li>
<li>as a separate Piwik instance, hosted by us, but not shared with other customers or web sites,
and the customer will receive full administration rights for the instance.</li>
<li>as a customer-hosted solution. We can install and configure a Piwik instance for our customers
on their own servers or at their chosen hosting provider, and in this case the customer retains
all the privileges and responsibility of maintaining and hosting the software on their own</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Sitemaps: the rails 3.1 way]]></title>
    <link href="http://rubystudio.github.com/blog/2011/09/10/sitemaps-the-rails-3-dot-1-way/"/>
    <updated>2011-09-10T19:07:00+03:00</updated>
    <id>http://rubystudio.github.com/blog/2011/09/10/sitemaps-the-rails-3-dot-1-way</id>
    <content type="html"><![CDATA[<p>Having a sitemap for your website is a nice convention, it helps search engines find, index and build
an hierarchy of your pages and it also gives you some control of what content is parsed and how often.
At Ruby Studio we regard sitemaps as a mandatory aspect of development and SEO and always include them
in the apps we build, even if it’s a simple app with no much dynamic content, such as our
<a href="http://rubystudio.net/">current homepage</a>.</p>

<p>So what is our preferred method of incorporating sitemaps in rails applications? There is a really
easy way, by using a gem that is actively maintained and fully compatible with rails 3.1. As an extra
benefit, the gem is really well documented. It’s called <a href="http://rubygems.org/gems/sitemap_generator">sitemap_generator</a>.</p>

<p>Here’s how to get going with it in a few easy steps:</p>

<ul>
<li>Add <code>gem 'sitemap_generator'</code> to your Gemfile and run <code>bundle</code>. This will install the gem</li>
<li>Run <code>rake sitemap:install</code> to setup the gem. This will generate a <code>config/sitemap.rb</code> file which is your
sitemap configuration descriptor file. You can run this task on your development machine and there will be
no need to repeat the process for production.</li>
<li>Open your <code>sitemap.rb</code> file to define the pages you need included in your sitemap. Only the root home page
is included by default. In your <code>sitemap.rb</code> file you'll find initially a block of code:</li>
</ul>


<p><code>ruby
SitemapGenerator::Sitemap.default_host = "http://www.example.com"
SitemapGenerator::Sitemap.create do
......
end
</code>
- Edit the file, inserting into the block the links to your pages or resources like this:</p>

<p>``` ruby
SitemapGenerator::Sitemap.default_host = "http://www.example.com"
SitemapGenerator::Sitemap.create do
  add '/contact_us'
  Content.find_each do |content|</p>

<pre><code>add content_path(content), :lastmod =&gt; content.updated_at
</code></pre>

<p>  end
end
```
As you can see from the example, static pages are added by a simple add declaration, and dynamic content can
be easily added by a nested block selector, polling your rails models and extracting blogs, articles or any
other dynamic assets you might have in your app. Neat and easy!</p>

<p>There are a number of supporter options you can add to your configuration to fine tune the crawling
frequency, priority, etc, such as:</p>

<p><code>ruby
add '/contact_us', :changefreq =&gt; 'monthly'
add '/about', :priority =&gt; 0.75
</code></p>

<p>The full list is available in the <a href="http://rdoc.info/github/kjvarga/sitemap_generator/master/frames">gem documentation</a>.</p>

<ul>
<li>After writing the configuration, you’re ready to actually generate your sitemaps. Run <code>rake sitemap:refresh</code>.
This will create the sitemaps and put them in your public/ folder, appropriately compressing them with gzip
and naming them by default: <code>sitemap_index.xml.gz, sitemap1.xml.gz</code>, etc</li>
<li>Next you should add the path to your sitemap in your <code>robots.txt</code> file, so that the spiders can find it
automatically: <code>Sitemap: http://www.example.com/sitemap_index.xml.gz</code></li>
<li>Upon a sitemap generation, the script automatically notifies (pings) major search engines (Google, Yahoo,
Bing, Ask, SitemapWriter) that a new sitemap is available. In development you can disable the notification
by using instead <code>rake sitemap:refresh:no_ping</code></li>
<li>That’s all, you’re now ready to rumble with your new shiny sitemaps. In production you can add a crontab
entry (either manually, or using the <a href="http://rubygems.org/gems/whenever">whenever</a> gem) for the rake task
to automatically re-generate your sitemaps on, say, a daily basis. Here’s an example of raw crontab entry:</li>
</ul>


<p><code>sh
0 5 * * * /bin/bash -l -c 'cd /path/to/webapp &amp;&amp; RAILS_ENV=production rake -s sitemap:refresh --silent'
</code>
Or an example whenever entry:</p>

<p>``` ruby</p>

<h1>config/schedule.rb</h1>

<p>every 1.day, :at => '5:00 am' do
  rake "-s sitemap:refresh"
end
```</p>

<p>The whole setup and deployment process takes some 15 minutes and is really flexible and configurable.
No more reasons to skip on this important part of search engine optimization and web development
best practices.</p>
]]></content>
  </entry>
  
</feed>
